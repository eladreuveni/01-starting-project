{"ast":null,"code":"import { configureStore, createSlice } from \"@reduxjs/toolkit\";\nimport { INITIAL_COUNTER_STATE, INITIAL_SECOND_STATE } from \"./redux-consts\";\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: INITIAL_COUNTER_STATE,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    customIncrement(state, action) {\n      state.counter += action.payload;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    toggleShow(state) {\n      state.show = !state.show;\n    }\n\n  }\n});\nexport const counterActions = counterSlice.actions;\nconst secondSlice = createSlice({\n  name: \"second\",\n  initialState: INITIAL_SECOND_STATE,\n  reducers: {\n    changeName(state) {\n      state.name += \"a\";\n    },\n\n    toggleAuth(state) {\n      state.isAuthenticated = !state.isAuthenticated;\n    }\n\n  }\n});\nexport const secondActions = secondSlice.actions;\nconst myStore = configureStore({\n  reducer: {\n    counterSlice: counterSlice.reducer,\n    secondSlice: secondSlice.reducer\n  }\n}); // Infer the `RootState` and `AppDispatch` types from the store itself\n\nexport default myStore;","map":{"version":3,"sources":["/home/elad/projects/redux-workshop/01-starting-project/src/store/redux-with-toolkit.ts"],"names":["configureStore","createSlice","INITIAL_COUNTER_STATE","INITIAL_SECOND_STATE","counterSlice","name","initialState","reducers","increment","state","counter","customIncrement","action","payload","decrement","toggleShow","show","counterActions","actions","secondSlice","changeName","toggleAuth","isAuthenticated","secondActions","myStore","reducer"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,WAAzB,QAA4C,kBAA5C;AACA,SAASC,qBAAT,EAAgCC,oBAAhC,QAA4D,gBAA5D;AAEA,MAAMC,YAAY,GAAGH,WAAW,CAAC;AAC/BI,EAAAA,IAAI,EAAE,SADyB;AAE/BC,EAAAA,YAAY,EAAEJ,qBAFiB;AAG/BK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACC,OAAN;AACD,KAHO;;AAIRC,IAAAA,eAAe,CAACF,KAAD,EAAQG,MAAR,EAAgB;AAC7BH,MAAAA,KAAK,CAACC,OAAN,IAAiBE,MAAM,CAACC,OAAxB;AACD,KANO;;AAORC,IAAAA,SAAS,CAACL,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACC,OAAN;AACD,KATO;;AAURK,IAAAA,UAAU,CAACN,KAAD,EAAQ;AAChBA,MAAAA,KAAK,CAACO,IAAN,GAAa,CAACP,KAAK,CAACO,IAApB;AACD;;AAZO;AAHqB,CAAD,CAAhC;AAmBA,OAAO,MAAMC,cAAc,GAAGb,YAAY,CAACc,OAApC;AAMP,MAAMC,WAAW,GAAGlB,WAAW,CAAC;AAC9BI,EAAAA,IAAI,EAAE,QADwB;AAE9BC,EAAAA,YAAY,EAAEH,oBAFgB;AAG9BI,EAAAA,QAAQ,EAAE;AACRa,IAAAA,UAAU,CAACX,KAAD,EAAQ;AAChBA,MAAAA,KAAK,CAACJ,IAAN,IAAc,GAAd;AACD,KAHO;;AAIRgB,IAAAA,UAAU,CAACZ,KAAD,EAAQ;AAChBA,MAAAA,KAAK,CAACa,eAAN,GAAwB,CAACb,KAAK,CAACa,eAA/B;AACD;;AANO;AAHoB,CAAD,CAA/B;AAcA,OAAO,MAAMC,aAAa,GAAGJ,WAAW,CAACD,OAAlC;AAOP,MAAMM,OAAO,GAAGxB,cAAc,CAAC;AAC7ByB,EAAAA,OAAO,EAAE;AACPrB,IAAAA,YAAY,EAAEA,YAAY,CAACqB,OADpB;AAEPN,IAAAA,WAAW,EAAEA,WAAW,CAACM;AAFlB;AADoB,CAAD,CAA9B,C,CAYA;;AAKA,eAAeD,OAAf","sourcesContent":["import { configureStore, createSlice } from \"@reduxjs/toolkit\";\nimport { INITIAL_COUNTER_STATE, INITIAL_SECOND_STATE } from \"./redux-consts\";\n\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: INITIAL_COUNTER_STATE,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    customIncrement(state, action) {\n      state.counter += action.payload;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    toggleShow(state) {\n      state.show = !state.show;\n    },\n  },\n});\n\nexport const counterActions = counterSlice.actions;\n\n\n\n\n\nconst secondSlice = createSlice({\n  name: \"second\",\n  initialState: INITIAL_SECOND_STATE,\n  reducers: {\n    changeName(state) {\n      state.name += \"a\";\n    },\n    toggleAuth(state) {\n      state.isAuthenticated = !state.isAuthenticated;\n    },\n  },\n});\n\n\nexport const secondActions = secondSlice.actions;\n\n\n\n\n\n\nconst myStore = configureStore({\n  reducer: {\n    counterSlice: counterSlice.reducer,\n    secondSlice: secondSlice.reducer\n  }\n});\n\n\n\n\n\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof myStore.getState>\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof myStore.dispatch\n\nexport default myStore;\n"]},"metadata":{},"sourceType":"module"}